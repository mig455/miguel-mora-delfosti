@page "/register"
@using BlazorApp1.Models
@using BlazorApp1.Services
@using Blazored.LocalStorage
@inherits LayoutComponentBase
@inject ApiService ApiService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILocalStorageService LocalStorageService
@inject NotificationService NotificationService
<HeadContent>
    <link href="css/login.css" rel="stylesheet" />
</HeadContent>



@if (isAuthenticated)
{
    <div class="alert alert-warning" role="alert">
        Ya estás logueado. Redirigiendo a la página de proyectos...
    </div>
}
else
{

    <div class="contentLogin">
        <h3>Registrar</h3>
        <EditForm Model="user" OnValidSubmit="HandleRegister">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="username">Nombre de usuario</label>
                <InputText class="form-control" @bind-Value="user.Username" />
            </div>
            <div class="form-group">
                <label>Contraseña</label>
                <InputText @bind-Value="user.Password" class="form-control" type="password" />
            </div>
            <div class="form-group">
                <label>Email</label>
                <InputText @bind-Value="user.Email" class="form-control" />
            </div>
            <div class="botones">
                <button type="submit" class="btn btn-success btn-sm">Registrarse</button>
                <button class="btn btn-primary btn-sm" type="button" @onclick="NavigateToLogin">Ingresar</button>
            </div>
        </EditForm>
    </div>
}

@code {
    private bool isAuthenticated = false;
    private User user = new User();
    protected override async Task OnInitializedAsync()
    {
        var token = await LocalStorageService.GetItemAsync<string>("authToken");
        if (!string.IsNullOrEmpty(token))
        {
            isAuthenticated = true;
            NavigationManager.NavigateTo("/projects");
        }
    }
    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/");
    }
    private async Task HandleRegister()
    {
        var authResponse = await ApiService.Register(user);
        if (authResponse != null && authResponse.Token != null)
        {
            await LocalStorageService.SetItemAsync("authToken", authResponse.Token);
            ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(authResponse.Token);
            ShowNotification("Usuario registrado satisfactoriamente", "alert-success");
            NavigationManager.NavigateTo("/projects");
            return;
        }

        ShowNotification("Ocurrio un error al registrar el usuario", "alert-danger");
    }
    private void ShowNotification(string message, string alertType)
    {
        NotificationService.Notify(message, alertType);
    }
}